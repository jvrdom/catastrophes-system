<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:p="http://primefaces.org/ui"	
	template="/resources/template/layoutCatastrofe.xhtml">
	
	<f:metadata>
		<f:viewParam name="id" value="#{catastrofeBean.id}"/>
		<f:event type="preRenderView" listener="#{catastrofeBean.retrieve}"/>
	</f:metadata>
	
	<style>
		.hiddenDiv {
			display:none;
		}
	</style>

	<ui:param name="pageTitle" value="Create Catastrofe"/>

	<ui:define name="footer"/>
	
	<ui:define name="content">
	  <h:outputStylesheet name="#{catastrofeBean.estiloCss}" />
	  <h:form enctype="multipart/form-data" class="form-horizontal" id="form-catastrofe"> 
	  	<p:growl id="messages" showDetail="true" autoUpdate="true"/>	
	  	<div class="row" id="step1">
	  		<div class="col-xs-6">
	  			<div class="form-group">
				  	<div class="col-sm-10">
						<h:selectOneMenu id="comboCss" value="#{catastrofeBean.estilo}" valueChangeListener="#{catastrofeBean.seleccionarTema}" onchange="submit()" styleClass="selectpicker">
							<f:selectItem itemValue="tema1"/>
							<f:selectItem itemValue="tema2"/>
							<f:selectItem itemValue="tema3"/>
							<f:selectItem itemValue="tema4"/>
							<f:selectItem itemValue="tema5"/>
							<f:selectItem itemValue="tema6"/>
							<f:selectItem itemValue="tema7"/>
							<f:selectItem itemValue="tema8"/>
						</h:selectOneMenu>
					</div>
				</div>
	  			<div class="form-group">
  					<div class="col-sm-12">
		  				<p:fileUpload fileUploadListener="#{catastrofeBean.handleFileUploadImagen}" mode="advanced" dragDropSupport="false"
                 			multiple="false" allowTypes="/(\.|\/)(gif|jpe?g|png)$/"
                 			label="Elegir Icono"
                 			cancelLabel="Cancelar"
                 			uploadLabel="Subir"
                 			update="messages" />
					</div>
				</div>
	  			<div class="form-group">
		  			<div class="col-sm-12">	
		                <p:inputText id="inputname" value="#{catastrofeBean.catastrofe.nombre}" required="true" label="Name" styleClass="form-control">
		                    <f:validateLength minimum="2" />
		                </p:inputText>
		                <p:watermark for="inputname" value="Nombre de Evento" id="watermarkName" />
		            </div>
                </div>
                <div class="form-group">
		  			<div class="col-sm-12">	
		                <p:inputText id="inputdescripcion" value="#{catastrofeBean.catastrofe.descripcion}" required="true" label="Name" styleClass="form-control"/>
		                <p:watermark for="inputdescripcion" value="Descripcion" id="watermarkDesc" />
		            </div>
                </div>
                <div class="form-group">
		  			<div class="col-sm-12">
	                	<p:inputText id="inputdireccion" value="#{catastrofeBean.catastrofe.direccion}" required="true" label="Name" styleClass="form-control"/>
	                	<h:inputHidden value="#{catastrofeBean.latLng}" id='coord'/>
	                	<h:inputHidden value="#{catastrofeBean.radio}" id='radio'/>
				        <p:watermark for="inputdireccion" value="Direccion" id="watermarkDireccion" />
		            </div>
                </div>
                <div class="form-group">
				  	<div class="col-sm-10">
						<h:selectOneMenu id="tipo" value="#{catastrofeBean.catastrofe.tipoCatastrofe}" styleClass="selectpicker">
							<f:selectItem itemValue="Incendio"/>
							<f:selectItem itemValue="Sudestada"/>
							<f:selectItem itemValue="Inundacion"/>
							<f:selectItem itemValue="Terremoto"/>
							<f:selectItem itemValue="Tormenta"/>
						</h:selectOneMenu>
					</div>
				</div>
				
				<p:commandButton value="Asignar Ong's" oncomplete="PF('ongDlg').show();" actionListener="#{catastrofeBean.cargarOngs}" immediate="true" update=":form-catastrofe:ongDlgId" style="margin-bottom:10px;" ></p:commandButton>
				
	  		</div>
	  		<div class="col-xs-6" id="mapa" style="height: 400px;"></div>	  	
	  	</div>
		
		<div class="row" id="step2">
			<div style="display: none;">
			<p>hola</p>
			</div>
		</div>
		
		<div class="row" id="step3">
			<div style="display: none;">
			<p>holaUltimo</p>
			</div>
		</div>
		
		<p:dialog id="ongDlgId" header="Asignar Ong's." width="480" 
                  		closeOnEscape="true" resizable="false" modal="true" widgetVar="ongDlg" >
          			<h:panelGrid width="100%" cellspacing="5">
              			<h:outputText value="Seleccione las ong que colaborarán con la catástrofe." />
          			</h:panelGrid>
          			<p:spacer height="10"/>
          			<p:pickList id="pickList" value="#{catastrofeBean.ongPick}" var="ong" itemLabel="#{ong.nombre}" itemValue="#{ong}" 
                      showSourceFilter="true" showTargetFilter="true" filterMatchMode="contains"    
                      converter="#{catastrofeBean.ongConverter}" >
              			<f:facet name="sourceCaption">Ong's asignadas</f:facet>
              			<f:facet name="targetCaption">Resto de las ong's</f:facet>
						<p:column >
                      		<h:outputText value="#{ong.nombre}"/>
                  		</p:column>
             
         			</p:pickList>

          			<p:spacer height="5" styleClass="punteadoH" width="100%"/>
          			<h:panelGrid  columns="2" cellspacing="10" styleClass="cen" columnClasses="izq, izq" cellpadding="10" >
              				<p:commandButton value="Aplicar" oncomplete="PF('ongDlg').hide();"  actionListener="#{catastrofeBean.asignarOng}" 
                               styleClass="btn"  update=":form-catastrofe:messages"   />
              				<p:commandButton value="Cancelar" actionListener="#{catastrofeBean.cancelarAsigOng}"
                               update="pickList" immediate="true" oncomplete="PF('ongDlg').hide();" styleClass="btn"/>
          			</h:panelGrid>
				
      			</p:dialog>
	  </h:form>	
	  
	  
      <button id="next" type="button" class="btn btn-primary">Next</button>
		
	  <script type="text/javascript">
			var map;
			var geocoder;
			var circle;
			var overlays = [];
			var step = 1; 
			
			function initialize(){
				 geocoder = new google.maps.Geocoder();
				 var mapOptions = {
					 center: new google.maps.LatLng(-34.904375,-56.166414),
					 zoom: 13,
					 mapTypeId: google.maps.MapTypeId.ROADMAP,
					 mapTypeControl: true,
					 mapTypeControlOptions: {
					 	style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
				 	 }
				 };

				 map = new google.maps.Map(document.getElementById('mapa'),mapOptions);

				 google.maps.event.addListener(map, 'click', function(event) {
					 addMarkerWithCircle(event.latLng);
				 });

				 $("#next").click(function() {
					if(step == 1){
						$("#step2 div").attr('style','display:inline;');
						$("#step1 div").attr('style','display:none;');
						step++;
					} else if(step == 2){
						$("#step3 div").attr('style','display:inline;');
						$("#step2 div").attr('style','display:none;');
						step++;
					}

					if(step == 3){
						//$("#step2").removeClass('hiddenDiv');
						//$("#step1").addClass('hiddenDiv');
						//step++;
					}		  
				 });
			}

			function addMarkerWithCircle(location){
				if (overlays != null) {
					clearOverlays();	
				}
				
				var marker = new google.maps.Marker({
				    position: location,
				    map: map
				});
	
				var circleToMarkerOptions = {
	            	strokeColor: '#FF0000',
	            	strokeOpacity: 0.8,
	            	strokeWeight: 2,
	            	editable: true,
	            	fillColor: '#FF0000',
	            	fillOpacity: 0.35,
	            	map: map,
	            	radius: Math.sqrt(10) * 100
				}
				
				var circleToMarker = new google.maps.Circle(circleToMarkerOptions);

				circleToMarker.bindTo('center',marker,'position');
				map.fitBounds(circleToMarker.getBounds());

				overlays.push(marker);
				overlays.push(circleToMarker);

				codeLatLng(marker, circleToMarker.getRadius());

				google.maps.event.addListener(circleToMarker, 'radius_changed', function (){
	            	map.fitBounds(circleToMarker.getBounds());		            
		  	        document.getElementById('form-catastrofe:radio').value = circleToMarker.getRadius();				
		  		});

				document.getElementById('form-catastrofe:coord').value = circleToMarker.getCenter();
	            document.getElementById('form-catastrofe:radio').value = circleToMarker.getRadius();				
				
			}

			function clearOverlays (){
				for (var i = 0; i &lt; overlays.length; i++) {
				    overlays[i].setMap(null);
				}
			}

			function codeLatLng(marker, radio){
				var latLng = marker.getPosition();
				geocoder.geocode({'latLng': latLng}, function(results, status) {
				    if (status == google.maps.GeocoderStatus.OK) {
				      if (results[1]) {
				        //alert(results[1].formatted_address);
				        document.getElementById('form-catastrofe:inputdireccion').value = results[1].formatted_address;
				      } else {
				        alert('No results found');
				      }
				    } else {
				      alert('Geocoder failed due to: ' + status);
				    }
			  	});
			}

			$("#form-catastrofe\\:inputdireccion").bind('keypress', function(e){
				if(e.keyCode == 13) {
				  var address = document.getElementById('form-catastrofe:inputdireccion').value;
	  	          var bounds = new google.maps.LatLngBounds();
	  	          geocoder.geocode( { 'address': address}, function(results, status) {
	  	            if (status == google.maps.GeocoderStatus.OK) {
  	            	  map.setCenter(results[0].geometry.location);
	  	              var latLng = results[0].geometry.location;
	  	              		              
	  	              var circleOptions = {
	  	            	strokeColor: '#FF0000',
	  	            	strokeOpacity: 0.8,
	  	            	strokeWeight: 2,
	  	            	editable: true,
	  	            	fillColor: '#FF0000',
	  	            	fillOpacity: 0.35,
	  	            	map: map,
	  	            	center: results[0].geometry.location,
	  	            	radius: Math.sqrt(10) * 100
	  				  }

	  	              bounds.extend(latLng);
	  	              map.fitBounds(bounds);
	  	              var zoom = map.getZoom();
	  	              map.setZoom(zoom > 15 ? 15 : zoom);
	  	              
	  	              circle = new google.maps.Circle(circleOptions);

	  	              google.maps.event.addListener(circle, 'radius_changed', function (){
	  	            	map.fitBounds(circle.getBounds());		            
	  		  	        document.getElementById('form-catastrofe:radio').value = circle.getRadius();				
	  		  		  });
	  	          
	  	              document.getElementById('form-catastrofe:coord').value = circle.getCenter();
	  	              document.getElementById('form-catastrofe:radio').value = circle.getRadius();
	  	                	              
	  	            } else {
	  	              alert('Geocode was not successful for the following reason: ' + status);
	  	            }
	  	          });
				}
  	  	  	});

			$('#form-catastrofe\\:inputdireccion').keypress(function(event){
  			    if(event.keyCode == 13) {
  			      event.preventDefault();
  			      return false;
  			    }
  			});			

			google.maps.event.addDomListener(window, 'load', initialize);

  		</script>
	  </ui:define>
  </ui:composition>